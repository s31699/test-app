name: Java CI with Maven

on:
  push:

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version-output-step.outputs.version-output }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Calculate version
        shell: bash
        run: |
          function calculate_version {
            MAJOR_NUM=$(echo $2 | cut -d. -f1)
            MINOR_NUM=$(echo $2 | cut -d. -f2)
            PATCH_NUM=$(echo $2 | cut -d. -f3 | cut -d- -f1)

            NEW_MAJOR_NUM=$MAJOR_NUM
            NEW_MINOR_NUM=$MINOR_NUM
            NEW_PATCH_NUM=$PATCH_NUM

            if [ "${1,,}" = major ] ; then
              let NEW_MAJOR_NUM=$MAJOR_NUM+1
              NEW_MINOR_NUM=0
              NEW_PATCH_NUM=0
            elif [ "${1,,}" = minor ] ; then
              let NEW_MINOR_NUM=$MINOR_NUM+1
              NEW_PATCH_NUM=0
            elif [ "${1,,}" = patch ] ; then
              let NEW_PATCH_NUM=$PATCH_NUM+1
            fi

            echo $NEW_MAJOR_NUM.$NEW_MINOR_NUM.$NEW_PATCH_NUM
          }

          function calculate_build_version {
            MAJOR_NUM=$(echo $1 | cut -d. -f1)
            MINOR_NUM=$(echo $1 | cut -d. -f2)
            PATCH_NUM=$(echo $1 | cut -d. -f3)

            let NEW_MINOR_NUM=$MINOR_NUM+1
            echo $MAJOR_NUM.$NEW_MINOR_NUM.$PATCH_NUM-build.$(git rev-parse --short HEAD)
          }

          set +e
          PREV_VERSION=$(git tag | grep -E '.*[^hotfix]$' | tail -n 1)
          set -e

          if [ -z "$PREV_VERSION" ] ; then
            PREV_VERSION=0.0.0
          fi

          export HOTFIX=$(echo $GITHUB_REF_NAME | sed -n "s/^hotfix\/\([0-9.]*\).*/\1/p")
          if [ "$HOTFIX" ] || [ "${RELEASE,,}" == patch ] ; then
            export PREV_VERSION=$HOTFIX
          fi

          if [[ "${RELEASE,,}" =~ ^(major|minor|patch)$ ]] ; then
            export RELEASE_VERSION=$(calculate_version $RELEASE $PREV_VERSION)
          else
            export RELEASE_VERSION=$(calculate_build_version $PREV_VERSION)
          fi

          echo $RELEASE_VERSION > version.txt

      - id: version-output-step
        name: Set version output
        run: |
          echo "version-output=$(cat version.txt)" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: calculate-version
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up JDK 16 and cache Maven
        uses: actions/setup-java@v2
        with:
          java-version: '16'
          distribution: 'temurin'
          cache: maven

      - name: Display version
        run: echo "Building version ${{ needs.calculate-version.outputs.version }}"

      - name: Update pom.xml with calculated version
        run: |
          sed -i \
            -e "s/<version>local<\/version>/<version>${{ needs.calculate-version.outputs.version }}<\/version>/" \
            pom.xml

      - name: Build with Maven
        run: mvn -B verify

      - name: Upload JAR file
        uses: actions/upload-artifact@v2
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: target/*.jar
          retention-days: 10

  docker:
    runs-on: ubuntu-latest
    needs:
      - calculate-version
      - build
    if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host

      - name: Download JAR file
        uses: actions/download-artifact@v2
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: target/

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: s31699/test-api-gw:${{ needs.calculate-version.outputs.version }}

  trigger-deploy:
    runs-on: ubuntu-latest
    needs:
      - calculate-version
      - docker
    if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
    steps:
      - name: Invoke 'Deploy' workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy
          repo: s31699/test-deployment
          token: ${{ secrets.CI_TOKEN }}
          inputs: |
            { "app": "test-api-gw", "version": "${{ needs.calculate-version.outputs.version }}" }
